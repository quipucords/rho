---

- name: initialize date dictionary
  set_fact:
    date: "{{ date|default({}) }}"

- name: gather date.date fact
  raw: date
  register: date_date
  ignore_errors: yes
  when: '"date.date" in facts_to_collect'

- name: add date.date to dictionary
  set_fact:
    date: "{{ date|default({}) | combine({ item: date_date['stdout_lines'][0] | default('error') }) }}"
  with_items:
  - 'date.date'
  when: '"date.date" in facts_to_collect'

- name: gather date.anaconda_log fact
  raw: ls --full-time /root/anaconda-ks.cfg | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}'
  register: date_anaconda_log_cmd
  become: yes
  ignore_errors: yes
  when: '"date.anaconda_log" in facts_to_collect'

- name: extract result value for date.anaconda_log
  set_fact:
    date_anaconda_log: "{{ date_anaconda_log_cmd['stdout'] | trim | default('error') }}"
  when: '"date.anaconda_log" in facts_to_collect and "stdout" in date_anaconda_log_cmd'

- name: handle failure value for date.anaconda_log
  set_fact:
    date_anaconda_log: "error"
  when: '"date.anaconda_log" in facts_to_collect and "stdout" not in date_anaconda_log_cmd'

- name: add date.anaconda_log to dictionary
  set_fact:
    date: "{{ date|default({}) | combine({ item: date_anaconda_log }) }}"
  with_items:
  - 'date.anaconda_log'
  when: '"date.anaconda_log" in facts_to_collect'

- name: gather date.machine_id fact
  raw: ls --full-time /etc/machine-id | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}'
  register: date_machine_id
  ignore_errors: yes
  when: '"date.machine_id" in facts_to_collect'

- name: add date.machine_id to dictionary
  set_fact:
    date: "{{ date|default({}) | combine({ item: date_machine_id['stdout_lines'][0] | default('error') }) }}"
  with_items:
  - 'date.machine_id'
  when: '"date.machine_id" in facts_to_collect'

- name: gather date.filesystem_create fact
  raw: fs_date=$(tune2fs -l $(mount | egrep '/ type' | grep -o '/dev.* on' | sed -e 's/\on//g') 2> /dev/null | grep 'Filesystem created' | sed 's/Filesystem created:\s*//g'); if [[ $fs_date ]]; then date +'%F' -d \"$fs_date\" 2> /dev/null; else echo "" ; fi
  register: date_filesystem_create
  ignore_errors: yes
  when: 'have_tune2fs and "date.filesystem_create" in facts_to_collect'

- name: add date.filesystem_create to dictionary
  set_fact:
    date: "{{ date|default({}) | combine({ item: date_filesystem_create['stdout_lines'][0] | default('error') if have_tune2fs else 'N/A (tune2fs not found)' }) }}"
  with_items:
  - 'date.filesystem_create'
  when: '"date.filesystem_create" in facts_to_collect'

- name: gather date.yum_history fact
  raw: yum history 2> /dev/null| tail -n 4 | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}'
  register: date_yum_history_cmd
  become: yes
  ignore_errors: yes
  when: 'have_yum and "date.yum_history" in facts_to_collect'

- name: extract result value for date.yum_history
  set_fact:
    date_yum_history: "{{  date_yum_history_cmd['stdout_lines'] | select | first | default('error') if have_yum else 'N/A (yum not found)' }}"
  when: '"date.yum_history" in facts_to_collect and "stdout_lines" in date_yum_history_cmd'

- name: handle failure value for date.yum_history
  set_fact:
    date_yum_history: "{{ 'error' if have_yum else 'N/A (yum not found)' }}"
  when: '"date.yum_history" in facts_to_collect and "stdout_lines" not in date_yum_history_cmd'

- name: add date.yum_history to dictionary
  set_fact:
    date: "{{ date|default({}) | combine({ item: date_yum_history }) }}"
  with_items:
  - 'date.yum_history'
  when: '"date.yum_history" in facts_to_collect'
