
---

# Use locate to look for business-central and kie-server

    - name: find business-central candidates
      raw: locate --basename business-central | egrep '.*/business-central(.war)?/?$'
      register: jboss_brms_business_central_candidates
      ignore_errors: yes
      when: 'have_locate and "jboss.brms" in facts_to_collect'

    - name: find kie-server candidates
      raw: locate --basename 'kie-server*' | egrep --invert-match '(.*.xml)|(.*.jar)'
      register: jboss_brms_kie_server_candidates
      ignore_errors: yes
      when: 'have_locate and "jboss.brms" in facts_to_collect'

# Combine the above with any EAP_HOME directories we've found

    - name: combine special directory candidates into single list
      set_fact:
        business_central_candidates: "{{ (jboss_brms_business_central_candidates.get('stdout_lines', []) +
                                          (eap_home_candidates | map('format', '%s/standalone/deployments/business-central.war') | list)) | unique }}"
        kie_server_candidates: "{{ (jboss_brms_kie_server_candidates.get('stdout_lines', []) +
                                    (eap_home_candidates | map('format', '%s/standalone/deployments/kie-server.war') | list)) | unique }}"
      when: '"jboss.brms" in facts_to_collect'

    - name: cat MANIFEST.MF files
      raw: cat {{ item }}/META-INF/MANIFEST.MF
      register: jboss_brms_manifest_mf
      ignore_errors: yes
      with_items: "{{ business_central_candidates + kie_server_candidates }}"
      when: '"jboss.brms" in facts_to_collect'

    - name: look for kie-api files inside candidate directories
      raw: ls -1 {{ item }}/WEB-INF/lib/kie-api*
      register: jboss_brms_kie_in_business_central
      ignore_errors: yes
      with_items: "{{ business_central_candidates }}"
      when: '"jboss.brms" in facts_to_collect'

    - name: look for all kie-api files on the system
      raw: locate --basename 'kie-api*'
      register: jboss_brms_locate_kie_api
      ignore_errors: yes
      when: 'have_locate and "jboss.brms" in facts_to_collect'

# Tasks that do filesystem scans. This will scan linux systems for
# JBoss BRMS or Drools Installations
    - name: Gather jboss.brms.kie-api-ver
      raw: find {{scan_dirs}} -xdev -name kie-api* 2> /dev/null | sed 's/.*kie-api-//g' | sed 's/.jar.*//g' | sort -u
      register: jboss.brms.kie-api-ver
      ignore_errors: yes
      when: '"jboss.brms.kie-api-ver" in facts_to_collect'

    - name: Gather jboss.brms.drools-core-ver
      raw: find {{scan_dirs}} -xdev -name drools-core* 2> /dev/null | sed 's/.*drools-core-//g' | sed 's/.jar.*//g' | sort -u
      register: jboss.brms.drools-core-ver
      ignore_errors: yes
      when: '"jboss.brms.drools-core-ver" in facts_to_collect'

    - name: Gather jboss.brms.kie-war-ver
      raw: OIFS="$IFS"; IFS=$'\n'; for war in $(find {{scan_dirs}} -xdev -name kie*.war 2> /dev/null); do if [[ -d  "$war" ]]; then cat "$war"/META-INF/MANIFEST.MF 2> /dev/null | grep Implementation-Version | sed "s/Implementation-Version://g" | sed "s/ //g" | sed 's/\r$//' | sort -u; else fgrep -irsal kie-api "$war" | egrep -o "[0-9]\.[0-9]\.[0-9].*-" | sed "s/-$//g" | sed 's/\r$//' | sort -u; fi; done; IFS="$OIFS"
      register: jboss.brms.kie-war-ver
      ignore_errors: yes
      when: '"jboss.brms.kie-war-ver" in facts_to_collect'
