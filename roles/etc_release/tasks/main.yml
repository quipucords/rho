---

- name: initialize etc_release dictionary
  set_fact:
    etc_release: "{{ etc_release|default({}) }}"

- name: initialize etc_release.name
  set_fact: etc_release_name=""
  when: '"etc_release.name" in facts_to_collect'

- name: initialize etc_release.version
  set_fact: etc_release_version=""
  when: '"etc_release.version" in facts_to_collect'

- name: initialize etc_release.release
  set_fact: etc_release_release=""
  when: '"etc_release.release" in facts_to_collect'

- name: initialize get_etc_release_name
  set_fact: get_etc_release_name={{ "etc_release.name" in facts_to_collect }}

- name: initialize get_etc_release_version
  set_fact: get_etc_release_version={{ "etc_release.version" in facts_to_collect }}

- name: initialize get_etc_release_release
  set_fact: get_etc_release_release={{ "etc_release.release" in facts_to_collect }}

- name: initialize get_etc_release
  set_fact: get_etc_release={{ get_etc_release_name or get_etc_release_version or get_etc_release_release }}

- name: check if /etc/lsb-release file exists
  raw: if [ -f /etc/lsb-release ]; then echo "Y"; else echo "N"; fi
  register: lbs_release_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: check if /etc/debian_version file exists
  raw: if [ -f /etc/debian_version ]; then echo "Y"; else echo "N"; fi
  register: debian_version_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: check if /etc/redhat-release file exists
  raw: if [ -f /etc/redhat-release ]; then echo "Y"; else echo "N"; fi
  register: redhat_release_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: check if /etc/release file exists
  raw: if [ -f /etc/release ]; then echo "Y"; else echo "N"; fi
  register: etc_release_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: check if /etc/SuSE-release file exists
  raw: if [ -f /etc/SuSE-release ]; then echo "Y"; else echo "N"; fi
  register: SuSE_release_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: check if /etc/mandriva-release file exists
  raw: if [ -f /etc/mandriva-release ]; then echo "Y"; else echo "N"; fi
  register: mandriva_release_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: check if /etc/enterprise-release file exists
  raw: if [ -f /etc/enterprise-release ]; then echo "Y"; else echo "N"; fi
  register: enterprise_release_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: check if /etc/sun-release file exists
  raw: if [ -f /etc/sun-release ]; then echo "Y"; else echo "N"; fi
  register: sun_release_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: check if /etc/slackware-release file exists
  raw: if [ -f /etc/slackware-release ]; then echo "Y"; else echo "N"; fi
  register: slackware_release_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: check if /etc/ovs-release file exists
  raw: if [ -f /etc/ovs-release ]; then echo "Y"; else echo "N"; fi
  register: ovs_release_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: check if /etc/ovs-release file exists
  raw: if [ -f /etc/ovs-release ]; then echo "Y"; else echo "N"; fi
  register: arch_release_found
  ignore_errors: yes
  when: 'get_etc_release'

- name: set os for etc_release data based on lbs_release_found
  raw: . /etc/lsb-release; echo "$DISTRIB_ID";
  register: lbs_release_found_os
  ignore_errors: yes
  when: 'get_etc_release and lbs_release_found["stdout_lines"][0] == "Y"'

- name: set ver for etc_release data based on lbs_release_found
  raw: . /etc/lsb-release; echo "$DISTRIB_RELEASE";
  register: lbs_release_found_ver
  ignore_errors: yes
  when: 'get_etc_release and lbs_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release data based on lbs_release_found
  set_fact:
    etc_release_name: '{{ lbs_release_found_os["stdout_lines"][0] }}'
  when: '"etc_release.name" in facts_to_collect and lbs_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.version based on lbs_release_found
  set_fact:
    etc_release_version: '{{ lbs_release_found_ver["stdout_lines"][0] }}'
  when: '"etc_release.version" in facts_to_collect and lbs_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.release based on lbs_release_found
  set_fact:
    etc_release_release: '{{ etc_release_name + " " + etc_release_version }}'
  when: '"etc_release.release" in facts_to_collect and lbs_release_found["stdout_lines"][0] == "Y"'

- name: set os for etc_release.name based on debian_version_found
  set_fact:
    etc_release_name: "Debian"
  when: '"etc_release.name" in facts_to_collect and debian_version_found["stdout_lines"][0] == "Y"'

- name: set ver for etc_release.version based on debian_version_found
  raw: cat /etc/debian_version
  register: debian_version_found_ver
  ignore_errors: yes
  when: 'get_etc_release and debian_version_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.version based on debian_version_found
  set_fact: etc_release_version=debian_version_found_ver["stdout_lines"][0]
  when: '"etc_release.version" in facts_to_collect and debian_version_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.release based on debian_version_found
  set_fact:
    etc_release_release: '{{ etc_release_name + " " + etc_release_version }}'
  when: '"etc_release.release" in facts_to_collect and debian_version_found["stdout_lines"][0] == "Y"'

- name: set rel for etc_release data based on redhat_release_found
  raw: cat /etc/redhat-release
  register: redhat_release_found_release
  ignore_errors: yes
  when: 'get_etc_release and redhat_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release data based on redhat_release_found_release
  set_fact:
    etc_release_name: "{{ redhat_release_found_release['stdout_lines'][0].split('release')[0] }}"
  when:
    - '"etc_release.name" in facts_to_collect'
    - 'redhat_release_found["stdout_lines"][0] == "Y"'
    - '"stdout_lines" in redhat_release_found_release'
    - 'redhat_release_found_release["stdout_lines"]|length > 0'
    - '"release" in redhat_release_found_release["stdout_lines"][0]'

- name: gather etc_release.version based on redhat_release_found_release
  set_fact: etc_release_version="{{ redhat_release_found_release['stdout_lines'][0].split('release')[1] }}"
  when:
    - '"etc_release.version" in facts_to_collect'
    - 'redhat_release_found["stdout_lines"][0] == "Y"'
    - '"stdout_lines" in redhat_release_found_release'
    - 'redhat_release_found_release["stdout_lines"]|length > 0'
    - '"release" in redhat_release_found_release["stdout_lines"][0]'

- name: gather etc_release.release based on redhat_release_found_release
  set_fact:
    etc_release_release: "{{ redhat_release_found_release['stdout_lines'][0] }}"
  when:
    - '"etc_release.release" in facts_to_collect'
    - 'redhat_release_found["stdout_lines"][0] == "Y"'
    - '"stdout_lines" in redhat_release_found_release'
    - 'redhat_release_found_release["stdout_lines"]|length > 0'

- name: set rel for etc_release data based on etc_release_found
  raw: cat /etc/release
  register: etc_release_found_release
  ignore_errors: yes
  when: 'get_etc_release and etc_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.name based on etc_release_found
  set_fact:
    etc_release_name: "{{ etc_release_found_release['stdout_lines'][0].split('release')[0] }}"
  when:
    - '"etc_release.name" in facts_to_collect'
    - 'etc_release_found["stdout_lines"][0] == "Y"'
    - '"release" in etc_release_found_release["stdout_lines"][0]'

- name: gather etc_release.version based on etc_release_found
  set_fact:
    etc_release_version: "{{ etc_release_found_release['stdout_lines'][0].split('release')[1] }}"
  when:
    - '"etc_release.version" in facts_to_collect'
    - 'etc_release_found["stdout_lines"][0] == "Y"'
    - '"release" in etc_release_found_release["stdout_lines"][0]'

- name: gather etc_release.release based on etc_release_found
  set_fact:
    etc_release_release: "{{ etc_release_found_release['stdout_lines'][0] }}"
  when: '"etc_release.release" in facts_to_collect and etc_release_found["stdout_lines"][0] == "Y"'

- name: set rel for etc_release data based on SuSE_release_found
  raw: cat /etc/SuSE-release
  register: SuSE_release_found_release
  ignore_errors: yes
  when: 'get_etc_release and SuSE_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.name based on SuSE_release_found
  set_fact:
    etc_release_name: "{{ SuSE_release_found_release['stdout_lines'][0].split('release')[0] }}"
  when:
    - '"etc_release.name" in facts_to_collect'
    - 'SuSE_release_found["stdout_lines"][0] == "Y"'
    - '"release" in SuSE_release_found_release["stdout_lines"][0]'

- name: gather etc_release.version based on SuSE_release_found
  set_fact:
    etc_release_version: "{{ SuSE_release_found_release['stdout_lines'][0].split('release')[1] }}"
  when:
    - '"etc_release.version" in facts_to_collect'
    - 'SuSE_release_found["stdout_lines"][0] == "Y"'
    - '"release" in SuSE_release_found_release["stdout_lines"][0]'

- name: gather etc_release.release based on SuSE_release_found
  set_fact:
    etc_release_release: "{{ SuSE_release_found_release['stdout_lines'][0] }}"
  when: '"etc_release.release" in facts_to_collect and SuSE_release_found["stdout_lines"][0] == "Y"'

- name: set rel for etc_release data based on mandriva_release_found
  raw: cat /etc/mandriva-release
  register: mandriva_release_found_release
  ignore_errors: yes
  when: 'get_etc_release and mandriva_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.name based on mandriva_release_found
  set_fact:
    etc_release_name: "{{ mandriva_release_found_release['stdout_lines'][0].split('release')[0] }}"
  when:
    - '"etc_release.name" in facts_to_collect'
    - 'mandriva_release_found["stdout_lines"][0] == "Y"'
    - '"release" in mandriva_release_found_release["stdout_lines"][0]'

- name: gather etc_release.version based on mandriva_release_found
  set_fact:
    etc_release_version: "{{ mandriva_release_found_release['stdout_lines'][0].split('release')[1] }}"
  when:
    - '"etc_release.version" in facts_to_collect'
    - 'mandriva_release_found["stdout_lines"][0] == "Y"'
    - '"release" in mandriva_release_found_release["stdout_lines"][0]'

- name: gather etc_release.release based on mandriva_release_found
  set_fact:
    etc_release_release:"{{ mandriva_release_found_release['stdout_lines'][0] }}"
  when: '"etc_release.release" in facts_to_collect and mandriva_release_found["stdout_lines"][0] == "Y"'

- name: set rel for etc_release data based on enterprise_release_found
  raw: cat /etc/enterprise-release
  register: enterprise_release_found_release
  ignore_errors: yes
  when: 'get_etc_release and enterprise_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.name based on enterprise_release_found
  set_fact:
    etc_release_name:"{{ enterprise_release_found_release['stdout_lines'][0].split('release')[0] }}"
  when:
    - '"etc_release.name" in facts_to_collect'
    - 'enterprise_release_found["stdout_lines"][0] == "Y"'
    - '"release" in enterprise_release_found_release["stdout_lines"][0]'

- name: gather etc_release.version based on enterprise_release_found
  set_fact:
    etc_release_version: "{{ enterprise_release_found_release['stdout_lines'][0].split('release')[1] }}"
  when:
    - '"etc_release.version" in facts_to_collect'
    - 'enterprise_release_found["stdout_lines"][0] == "Y"'
    - '"release" in enterprise_release_found_release["stdout_lines"][0]'

- name: gather etc_release.release based on enterprise_release_found
  set_fact:
    etc_release_release: "{{ enterprise_release_found_release['stdout_lines'][0] }}"
  when: '"etc_release.release" in facts_to_collect and enterprise_release_found["stdout_lines"][0] == "Y"'

- name: set rel for etc_release data based on sun_release_found
  raw: cat /etc/sun-release
  register: sun_release_found_release
  ignore_errors: yes
  when: 'get_etc_release and sun_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.name based on sun_release_found
  set_fact:
    etc_release_name: "{{ sun_release_found_release['stdout_lines'][0].split('release')[0] }}"
  when:
    - '"etc_release.name" in facts_to_collect'
    - 'sun_release_found["stdout_lines"][0] == "Y"'
    - '"release" in sun_release_found_release["stdout_lines"][0]'

- name: gather etc_release.version based on sun_release_found
  set_fact:
    etc_release_version: "{{ sun_release_found_release['stdout_lines'][0].split('release')[1] }}"
  when:
    - '"etc_release.version" in facts_to_collect'
    - 'sun_release_found["stdout_lines"][0] == "Y"'
    - '"release" in sun_release_found_release["stdout_lines"][0]'

- name: gather etc_release.release based on sun_release_found
  set_fact:
    etc_release_release: "{{ sun_release_found_release['stdout_lines'][0] }}"
  when: '"etc_release.release" in facts_to_collect and sun_release_found["stdout_lines"][0] == "Y"'

- name: set rel for etc_release data based on slackware_release_found
  raw: cat /etc/slackware-release
  register: slackware_release_found_release
  ignore_errors: yes
  when: 'get_etc_release and slackware_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.name based on slackware_release_found
  set_fact:
    etc_release_name: "{{ slackware_release_found_release['stdout_lines'][0].split('release')[0] }}"
  when:
    - '"etc_release.name" in facts_to_collect'
    - 'slackware_release_found["stdout_lines"][0] == "Y"'
    - '"release" in slackware_release_found_release["stdout_lines"][0]'

- name: gather etc_release.version based on slackware_release_found
  set_fact:
    etc_release_version: "{{ slackware_release_found_release['stdout_lines'][0].split('release')[1] }}"
  when:
    - '"etc_release.version" in facts_to_collect'
    - 'slackware_release_found["stdout_lines"][0] == "Y"'
    - '"release" in slackware_release_found_release["stdout_lines"][0]'

- name: gather etc_release.release based on slackware_release_found
  set_fact:
    etc_release_release: "{{ slackware_release_found_release['stdout_lines'][0] }}"
  when: '"etc_release.release" in facts_to_collect and slackware_release_found["stdout_lines"][0] == "Y"'

- name: set rel for etc_release data based on ovs_release_found
  raw: cat /etc/ovs-release
  register: ovs_release_found_release
  ignore_errors: yes
  when: 'get_etc_release and ovs_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.name based on ovs_release_found
  set_fact:
    etc_release_name: "{{ ovs_release_found_release['stdout_lines'][0].split('release')[0] }}"
  when:
    - '"etc_release.name" in facts_to_collect'
    - 'ovs_release_found["stdout_lines"][0] == "Y"'
    - '"release" in ovs_release_found_release["stdout_lines"][0]'

- name: gather etc_release.version based on ovs_release_found
  set_fact:
    etc_release_version: "{{ ovs_release_found_release['stdout_lines'][0].split('release')[1] }}"
  when:
    - '"etc_release.version" in facts_to_collect'
    - 'ovs_release_found["stdout_lines"][0] == "Y"'
    - '"release" in ovs_release_found_release["stdout_lines"][0]'

- name: gather etc_release.release based on ovs_release_found
  set_fact:
    etc_release_release: "{{ ovs_release_found_release['stdout_lines'][0] }}"
  when: '"etc_release.release" in facts_to_collect and ovs_release_found["stdout_lines"][0] == "Y"'

- name: set rel for etc_release data based on arch_release_found
  raw: cat /etc/arch-release
  register: arch_release_found_release
  ignore_errors: yes
  when: 'get_etc_release and arch_release_found["stdout_lines"][0] == "Y"'

- name: gather etc_release.name based on arch_release_found
  set_fact:
    etc_release_name: "{{ arch_release_found_release['stdout_lines'][0].split('release')[0] }}"
  when:
    - '"etc_release.name" in facts_to_collect'
    - 'arch_release_found["stdout_lines"][0] == "Y"'
    - '"release" in arch_release_found_release["stdout_lines"][0]'

- name: gather etc_release.version based on arch_release_found
  set_fact:
    etc_release_version: "{{ arch_release_found_release['stdout_lines'][0].split('release')[1] }}"
  when:
    - '"etc_release.version" in facts_to_collect'
    - 'arch_release_found["stdout_lines"][0] == "Y"'
    - '"release" in arch_release_found_release["stdout_lines"][0]'

- name: gather etc_release.release based on arch_release_found
  set_fact:
    etc_release_release: "{{ arch_release_found_release['stdout_lines'][0] }}"
  when: '"etc_release.release" in facts_to_collect and arch_release_found["stdout_lines"][0] == "Y"'

- name: set os for etc_release.name using uname -s
  raw: uname -s
  register: etc_release_uname_os
  ignore_errors: yes
  when: 'get_etc_release and etc_release_name == ""'

- name: gather etc_release.name based on etc_release_uname_os
  set_fact:
    etc_release_name: '{{ etc_release_uname_os["stdout_lines"][0] | default("error") }}'
  when: '"etc_release.name" in facts_to_collect and etc_release_name == ""'

- name: set ver for etc_release.version using uname -r
  raw: uname -r
  register: etc_release_uname_ver
  ignore_errors: yes
  when: '"etc_release.version" in facts_to_collect and etc_release_version == ""'

- name: gather etc_release.version based on etc_release_uname_ver
  set_fact:
    etc_release_version: '{{ etc_release_uname_ver["stdout_lines"][0] | default("error") }}'
  when: '"etc_release.version" in facts_to_collect and etc_release_version == ""'

- name: gather etc_release.release based on etc_release_uname_os and etc_release_uname_ver
  set_fact:
    etc_release_release: "{{ etc_release_name + ' ' + etc_release_version }}"
  when: '"etc_release.release" in facts_to_collect and etc_release_release == ""'

- name: add etc_release.name to dictionary
  set_fact:
    etc_release: "{{ etc_release|default({}) | combine({ item: etc_release_name }) }}"
  with_items:
  - 'etc_release.name'
  when: '"etc_release.name" in facts_to_collect'

- name: add etc_release.version to dictionary
  set_fact:
    etc_release: "{{ etc_release|default({}) | combine({ item: etc_release_version }) }}"
  with_items:
  - 'etc_release.version'
  when: '"etc_release.version" in facts_to_collect'

- name: add etc_release.release to dictionary
  set_fact:
    etc_release: "{{ etc_release|default({}) | combine({ item: etc_release_release }) }}"
  with_items:
  - 'etc_release.release'
  when: '"etc_release.release" in facts_to_collect'
